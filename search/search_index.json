{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the SiteSync Documentation Portal","text":"<ul> <li> <p> Overview</p> <p>Get an overview of the architechure and LoRawan environment  Getting started</p> </li> <li> <p> Getting started</p> <p>Installation documentation for getting Ignition, the Perspective mobile app, and SiteSync installed in your environment.  Installation Reference</p> </li> <li> <p> FAQ</p> <p>View frequently asked questions and troubleshooting guides  FAQ</p> </li> <li> <p> Configuring SiteSync</p> <p>SiteSync is a modular component that can plug into any architechture, get started by connecting to data.</p> <p> Configure for your Architecture</p> </li> </ul>"},{"location":"about/","title":"Certior Antiphates posuere","text":""},{"location":"about/#tua-acie-strinxit","title":"Tua acie strinxit","text":"<p><pre><code>function Decode(){\n\n}\n</code></pre> Lorem markdownum volucres scitatur Euboico monuere, cumque, se suo. Incessit manibus, pias confinia turba.</p> <pre><code>var odbc = artificialDesign(frequencyWireless(socketLock), rgb) * daemonNas(\n        1, spoofingBox.dot(tag_ocr, nasSoftwareSoft), boot_unfriend_drm +\n        resolution);\nminimize.flowchart_clock_ldap -= plagiarismPassiveArp(quicktimeSpoofing -\n        itunesIctSnippet);\nif (scan_northbridge_commercial * touchscreen(-2, readSkuDrm,\n        software_text_digital)) {\n    printerSouthbridge.toolbarRtf.idePermalinkDialog(bccMultitasking /\n            portHostSuperscalar);\n} else {\n    domainVolumeBitrate = userBroadbandIteration(client);\n    ergonomicsMultiprocessingPower(transferUmlLeaf + 73, warmCtrDram);\n}\ncd_wpa_clean.firmwareChipsetBar(mouse.dynamic_intranet(syntax + property),\n        browserMicrocomputer.hackerWindowsPublishing(3, 4, ppga) + sdsl.isp(\n        menu_iscsi_memory, floppy_ipv), memoryDbmsUps(card, meta, icio +\n        system_soft_megapixel));\nif (onlyCmykStatic + file_touchscreen_resources(cloud.web_bot(32,\n        lockBrowser, doubleGisFile), engine, mediaOnly.disk_hyper_passive(\n        superscalarApiPortal, flash_token_php, internet))) {\n    template_resolution_piracy(softwareRfidRpm, ppl_pup);\n    heap(newbie_smishing, boolean + aixMmsPrinter, hotPageCifs);\n}\n</code></pre>"},{"location":"about/#fixis-candidus-profundi-e-tamen-cratere","title":"Fixis candidus profundi e tamen cratere","text":"<p>Pellis revocantis cum dederant aetas nec, et putri Iove nec liquidis, dimovit. Perque vel cibis ramum vincla aenum pretioque mihi stolidae dolens monstri, in atque meritoque Dianae crimen perfudit.</p> <ol> <li>Nubibus est albet statuit commune</li> <li>Ubi acres</li> <li>Alumnae animi novo dextra herbas Avernae Iovi</li> <li>Dies moventem</li> <li>Terrae simus ante ignara caelaverat locus indignantesque</li> <li>Pirithoum matutinaeque quid ferinae Ophias</li> </ol> <p>Limite et quibus, sparsos quoque in levis necemque: nec morti namque totidemque? Ille receptus. Illa ratis plenis cuspide coniunx poteram paras Tyrios abiturus morte; rex nullum finiat, oras sic.</p>"},{"location":"about/#mori-altae-corporibus-accipitrem-quod","title":"Mori altae corporibus accipitrem quod","text":"<p>Ut oscula tibia times famulosque tactu pater, et inter solent trepidoque. Animis summum sepulcro coeperunt agros: medulla nactus, coniunx esse atris, pariter Sticteque tantus venenis armenta tum! Iovis unam laqueis equorum nemorum aequora; obscurum leto: aquosis dominatur corpore. Per firmo Typhoea cupies, ait ibi movere, celeberrima, umquam.</p> <p>Nec finire quam tenebris recisum iuvenem flexit obliquaque tuum latius Iapeto concutio quod. Et Diam tibi ubi anne. Nec hac quo feritatis iuste.</p> <p>Annisque thalamos bracchiaque et et ministris retia aether flammae ac non hac omnibus iacta sublimis placidissime. Gravi relinquunt plusque! Quibus hoc rata?</p>"},{"location":"about/","title":"Index","text":""},{"location":"about/#hello","title":"Hello","text":""},{"location":"about/architecture/","title":"Architecture","text":"<p>Sample Architechture with SiteSync</p>"},{"location":"faq/howTo/","title":"Howto","text":"<p>How do I add a device</p> <p>How do I tell the status of my device</p> <p>How do I bulk upload</p> <p>How do I edit a device</p> <p>How do I make a UDT</p> <p>How do I add a decoder</p> <p>How do I edit a decoder</p> <p>How do I send a downlink</p>"},{"location":"faq/troubleshooting/","title":"Troubleshooting","text":"<p>Issue:  Not getting data into SiteSync module</p> <p>Check the Connections page to check  the status of MQTT connection. The status is updated live, and the client will try to auto-reconnect when disconnected.</p> <p>If your connection status is Connected, check the mqtt topic that is being used, and ensure that information is being published on the expected topic.  We recommend the client https://mqtt-explorer.com/ to see the activity of topics on a selected broker</p> <p>Ensure devices are synced in SiteSync that are also being published on the topic. Devices that are not synced in SiteSync are not processed. </p>"},{"location":"installation/ignition/","title":"Ignition Gateway","text":"<p>Follow the steps below for installing an Ignition gateway on your platform of choice</p>  Docker Linux Windows <p>An Ignition gateway can quickly be deployed via Docker. </p> <p>SiteSync reccomends all new installations of Ignition to be  installed using Docker as it allows for process isolation, quick deployment, and easy management using Docker Engine.</p> <p>For full documentation on running Ignition within a Docker container, please visit the Ignition Docker Image documentation</p>"},{"location":"installation/ignition/#installation-via-cli","title":"Installation via CLI:","text":"<pre><code>docker run -d -p 8088:8088 --name Ignition-Gateway \\\n-v gw-data:/usr/local/bin/ignition/data \\\n--pull always inductiveautomation/ignition:latest \\\n-n Ignition-Gateway -a localhost -h 8088 -s 8043\n</code></pre>"},{"location":"installation/ignition/#docker-compose","title":"Docker Compose","text":"<pre><code>services:\n  # Ignition Gateway\n  gateway:\n    image: inductiveautomation/ignition:latest\n    ports:\n      - 8088:8088\n      - 8043:8043\n    volumes:\n      - gw-data:/usr/local/bin/ignition/data\n    # env_file: ignition.env  # optionally specify variables in a file, or using `environment:` below\n    environment:\n      - ACCEPT_IGNITION_EULA=Y\n      - IGNITION_EDITION=standard\n      - TZ=America/Chicago  # see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List\n    command: &gt;\n      -n docker-test\n      -m 1024\n      --\n      wrapper.java.initmemory=512\n      -Dignition.allowunsignedmodules=true\nvolumes:\n  gw-data:\n</code></pre>"},{"location":"installation/ignition/#linux-installation-steps","title":"Linux installation steps","text":"<ol> <li>Download the Ignition installer from https://inductiveautomation.com/downloads/ignition/ and move installer to target system (if applicable)</li> <li>make the executable installable <code>chmod +x ignition-x.x.x-linux-xxxinstaller.run</code></li> <li>Run the installer to install Ignition <code>./ignition-x.x.x-linux-xxxinstaller.run</code></li> <li>Visit the gateway provisioning page in your web browser using http://GATEWAY_IP:8088</li> </ol> <p>For full installation documentation, please consult Ignition Installation Documentation</p>"},{"location":"installation/ignition/#windows-installation-steps","title":"Windows installation steps","text":"<ol> <li>Download the Ignition installer from https://inductiveautomation.com/downloads/ignition/ and move installer to target system (if applicable)</li> <li>Run the installer and follow the prompts on the installation wizard</li> </ol> <p>For full installation documentation, please consult Ignition Installation Documentation</p>"},{"location":"installation/sitesync/module/","title":"Module","text":"<ol> <li>In the Ignition Gateway's GUI, navigate to <code>Config &gt; Modules</code> using the navigation menu on the left </li> <li>Scroll the bottom of the Module Configuration page, and click the button reading Install or Upgrade a Module </li> <li>Next, upload the <code>.modl</code> file containing the SiteSync LoRaWAN module to the Ignition gateway</li> <li>Agree to the terms and conditions and install the module</li> </ol>"},{"location":"installation/sitesync/perspective/","title":"Perspective","text":"<p>SiteSync's UI runs on Ignition's Perspective, which allows for reactive screens and the use of mobile applications.</p> <p>Instructions here to install SiteSync LoRaWAN module's UI</p> <ol> <li>From the Ignition Gateway GUI, navigate to <code>Config &gt; Projects</code> using the navigation menu on the left </li> <li>Select <code>Import project..</code> and on the next page upload the <code>.zip</code> file containing the SiteSync perspective project</li> <li>Once uploaded, you will see the SiteSync project added to your list of installed projects </li> </ol> <p>To launch the SiteSync Perspective project, navigate to the Home tab in the navigation menu, and scroll to find the  <code>View Projects</code> button. From here, you will be able to launch the SiteSync Perspective project.</p>"},{"location":"installation/sitesync/perspectiveMobileApp/","title":"Mobile App","text":"<p>SiteSync can be run as a native mobile app, through Ignition's Perspective mobile app. This enables people to sync LoRaWAN devices from their phone. The following are instructions on how to install the Perspective app.</p> <p>The Perspective app can be downloaded from the Apple App Store or the Google Play Store</p> <p>Once installed,  you will hit \"Add Gateway\" and enter the address of your running Ignition gateway.</p> <p>From there, you will see a list of Perspective applications, select the installed SiteSync project, and start syncing.</p>"},{"location":"lorawan-module/bulk-upload/","title":"Bulk Upload","text":"<p>SiteSync streamlines the device provisioning process by supporting a bulk upload feature that allows a user to use an Excel template to add many devices to SiteSync quickly.</p> <p>SiteSync Bulk Upload Template</p>"},{"location":"lorawan-module/bulk-upload/#excel-column-requirements","title":"Excel Column Requirements","text":"<p>Users are heavily encouraged to utilize the SiteSync Bulk Upload Template rather than making their own as SiteSync  performs spreadsheet validation on upload. The list below describes the data type and purpose of each column in the bulk upload template.</p> <ul> <li><code>dev_eui</code>: Hexadecimal. The unique identifier for the device (e.g., 0123456789ABCDEF) *</li> <li><code>app_key</code>: String. The application key for secure communication between the device and the application *</li> <li><code>name</code>: String. The device name, used as the Ignition tag name. It should be descriptive to help identify the device  within the tag provider *</li> <li><code>join_eui</code>: hexadecimal. The globally unique identifier used during device activation (e.g., 0123456789ABCDEF) *</li> <li><code>deviceType</code>: String. The UDT name associated with the device, which initializes the correct UDT instance in the  selected tag provider and associates an existing decoder with the device *</li> <li><code>description</code>: String. A brief description or notes about the device.</li> <li><code>tagPath</code>: String. Specifies a complete tag path with folders and nested folders. If left empty, all tags/devices  are created at the root of the tag provider.</li> <li><code>hardware_version</code>: String. Metadata about the sensor's hardware, written to the metadata tag.</li> <li><code>Location Description</code>: String. Information describing the installation location of the device.</li> <li><code>equipment</code>: String. Information about the equipment on which the sensor is installed.</li> </ul> <p>* required</p>"},{"location":"lorawan-module/bulk-upload/#custom-attributes","title":"Custom Attributes","text":"<p>Custom attributes can be added to the bulk upload template by adding a new column. The column name will be mapped to a  nested tag named \"custom_attributes\". This allows for any additional device-specific data to be included in the upload.</p>"},{"location":"lorawan-module/decoders/","title":"Decoders","text":"<p>LoRaWAN devices send data in either a hex or base64 encoded format, which is not meaningful without further processing. SiteSync allows for messages of any sensor type to be processed, decoded, and written to Ignition Tags via SiteSync's JavaScript engine.</p>"},{"location":"lorawan-module/decoders/#requirements-for-javascript-decoders","title":"Requirements for JavaScript Decoders","text":"<ul> <li>Method Signature: SiteSync expects every decoder to contain a function named <code>Decoder(bytes, port)</code>.</li> <li><code>bytes</code>: raw data generated by a LoRaWAN sensor as an array of bytes</li> <li><code>fport</code>: is the frame port number, represented as an integer, where the message was received</li> <li>Other helper functions included in the decoder file can be called by the main decoder method, ut, the <code>Decoder</code> function will always act as the main function.</li> <li>Return Value: The decoder must return an object that represents the desired tag structure of the UDT.</li> </ul>"},{"location":"lorawan-module/decoders/#custom-decoder-example","title":"Custom Decoder Example","text":"<pre><code>/**\n* Custom decoder function for decoding data.\n* @param bytes - The payload data to be decoded (an array of bytes).\n* @param port - The port number used during decoding.\n* @returns {string} - The decoded result as a string.\n*/\nfunction Decoder(bytes, fport) {\n  // Your decoding logic here\n  let decodedResult = {}; //empty object that holds all UDT tag values\n  decodedResult.Measurement = bytes[0]\n  decodedResult.BatteryLevel = bytes[1]\n  decodedResult.Temperature = bytes[2]\n  return decodedResult;\n}\n</code></pre>"},{"location":"lorawan-module/downlinks/","title":"Downlinks","text":"<p>LoRaWAN devices can accept configuration changes and commands through Downlinks, a binary command sent through the LoRa Networkserver that the device has an active session wiht.</p> <p>SiteSync give the ability to maintain and manage a library of pre-loaded commands, unique to the sensor. </p> <p>If the sensor you have synced has defined downlinks, you will be able to access them on the Device page. </p>"},{"location":"lorawan-module/downlinks/#image-of-device-page-downlinks","title":"image of device page downlinks","text":"<p>On button click, the command is sent, and the description of the last downlink will be assigned to the device for visibility.</p> <p>If your sensor does not have defined downlinks, you can add one under Device Profiles/Downlink.</p>"},{"location":"lorawan-module/downlinks/#image-of-downlink-creation-page","title":"image of downlink creation page","text":"<p>The following is needed to create a downlink:</p> Field Description Name Friendly name of the device Hex Command the binary command to be sent, in hex Port Port to send command on, if no port specified by manufacturer then use 2 Description The description of the downlink, will be stored on the device after downlink is sent. <p>SiteSync does not take any responsibility for custom downlinks.</p>"},{"location":"lorawan-module/network-server/","title":"Connections","text":"ChirpstackThingParkThe Things NetworkMultitech ConduitLoriot <p>Chirpstack is an open sourced LoRaWAN network server, that can be easily set up. The below is based on the default Chirpstack settings, check with whoever set up your Chirpstack to confirm how it is configured.</p> <p>ThingPark is an enterprise grade LoRaWAN network server by Actility, they offer a community edition (TPC), an enterprise edition (TPE), and a self hosted on-prem version. The below guide is based on the community edition, but behaviors should be consistent across the offerings.</p> <p>The Things Network (TTN) or The Things Stack (TTS) or The Things Industries (TTI) is an open sourced LoRaWAN network server, that can be accessed through public cloud, or hosted privately. The below guide is based on the community edition, and should be the same, however, it can be privately configured and hosted, so if not using the publicly hosted version, check how your instance is configured. </p> <p>The Multitech Conduit 300 and mPower models are LoRaWAN gateways that can host their own onboard network server at the edge. The following guide is how to integrate with SiteSync.</p> <p>LORIOT is a network server service provider LORAWAN of Swiss origin.  LORIOT offers a hosted and on-premise LORAWAN Network Server. The below guide is based on the USPRO edition, but behaviors should be consistent across the offerings.</p>"},{"location":"lorawan-module/network-server/#mqtt","title":"MQTT","text":"<p>Chirpstack has a built in broker for sharing data, SiteSync will connect to this integration.</p> <p>The MQTT integration will have the following fields to copy into SiteSync to create the MQTT connection.</p> SiteSync Field Description Broker URL or IP Address the URL that you access your instance of Chirpstack at, without http:// Port 1883 MQTT Topic application/{chirpstack-application-id}/device/+/event/up <p>On the MQTT Topic, replace {chirpstack-application-id} with the chirpstack application ID that your synced devices are in</p> <p>Default is no MQTT username or password or authentication required, but SiteSync recommends setting authentication to secure the data on your broker.</p>"},{"location":"lorawan-module/network-server/#join-server","title":"Join Server","text":"<p>The following fields are needed to create an API connection to your network server:</p> SiteSync Field Description URL The URL of the instance of your TTN, how you access it, plus the port 8090 Application ID The ID of the application you wish to sync devices into. Device Profile ID The default device profile that will be used, can be created under Device Profiles. API Token token generated by Chirpstack, generated under API Keys"},{"location":"lorawan-module/network-server/#where-to-find-these-fields-in-chirpstack","title":"Where to find these fields in Chirpstack","text":"<p>Application ID</p> <p>This is listed on the main page of your application: </p> <p>Device Profile ID</p> <p>This is listed on the main page of your device profile: </p> <p>We reccomend making a generic device profile to start, and customizing as your needs grow.</p> <p>API Token</p> <p>API Tokens are generated under the API Keys menu in Chirpstack.</p>"},{"location":"lorawan-module/network-server/#mqtt_1","title":"MQTT","text":"<p>Actility ThingPark outputs its' data to an external MQTT broker, so the below are settings to also subscribe to the same broker.</p> <p>The MQTT integration will have the following fields to copy into SiteSync to create the MQTT connection.</p> SiteSync Field Description Broker URL or IP Address Broker URL or IP Address: your external broker address Port your external broker port, usually 1883 or 8883 (TLS) MQTT Topic mqtt/things/+/uplink <p>MQTT Topic is editable in ThingPark, above is the default</p>"},{"location":"lorawan-module/network-server/#join-server_1","title":"Join Server","text":"<p>The following fields are needed to create an API connection to your network server:</p> SiteSync Field Description URL the URL that you access your instance of ThingPark, the community url is https://community.thingpark.io/ Application ID The ID of the application you wish to sync devices into. UserName The username of the service account to use with SiteSync Password corresponding service account password"},{"location":"lorawan-module/network-server/#where-to-find-these-fields-in-thingpark","title":"Where to find these fields in ThingPark","text":"<p>Application ID</p> <p>This is listed on the main page of your Connection under ID:</p> <p></p> <p>Use the full string of the ID where you want to sync devices into.</p> <p>Service Account</p> <p>To sync devices into Actility, a service account must be made for SiteSync to access ThingPark.</p> <p>This can be generated under the Administration menu, select Service Accounts. Add a service account and give it the following permissions:</p> Permission Devices multicast groups, and connections manager <p></p>"},{"location":"lorawan-module/network-server/#mqtt_2","title":"MQTT","text":"<p>TTN has an MQTT integration to export processed data, SiteSync will connect to this integration.</p> <p>To set up an MQTT output from TTN, select your application, navigate to Integrations, and select MQTT. </p> <p></p> <p>The MQTT integration will have the following fields to copy into SiteSync to create the MQTT connection.</p> SiteSync Field Description Broker URL or IP Address copy the Public address under MQTT Server host, without port number Port MQTT Server host port number, either 1883 or 8883 for TLS MQTT Topic v3/{username}/devices/+/up <p>On the MQTT Topic, replace {username} with the MQTT username</p> <p>MQTT Authentication is required and is ACL bound, fill in username and generated password.</p>"},{"location":"lorawan-module/network-server/#join-server_2","title":"Join Server","text":"<p>The following fields are needed to create an API connection to your network server:</p> SiteSync Field Description URL The URL of the instance of your TTN, how you access it. Application ID The ID of the application you wish to sync devices into. API Token token generated by TTN, limited to the specific app"},{"location":"lorawan-module/network-server/#where-to-find-these-fields-in-ttn","title":"Where to find these fields in TTN","text":"<p>Application ID</p> <p>This is listed on the main page of your application: </p> <p>API Token</p> <p>On your selected application, create an API key with the following permissions:</p> Permission View devices View device keys Create Devices Edit device keys Write downlink application traffic <p></p>"},{"location":"lorawan-module/network-server/#mqtt_3","title":"MQTT","text":"<p>The MultiTech Conduit outputs its data to an external MQTT broker, so the below are settings to also subscribe to the same broker.</p> <p>The MQTT integration will have the following fields to copy into SiteSync to create the MQTT connection.</p> SiteSync Field Description Broker URL or IP Address Broker URL or IP Address: your external broker address Port your external broker port, usually 1883 or 8883 (TLS) MQTT Topic user defined"},{"location":"lorawan-module/network-server/#join-server_3","title":"Join Server","text":"<p>The following fields are needed to create an API connection to the Conduit:</p> SiteSync Field Description URL the URL where you can access the Conduit, https is recommended Username a Username onboard the Multitech Conduit, SiteSync recommends creating a service account, separate from the management login Password the corresponding password <p>Note, SiteSync default adds devices to the onboard application 01-01-01-01-01-01-01-01, and we recommend setting your output broker ID to the same. For help getting your data out of the Conduit, reach out to Multitech Support, or SiteSync support.</p>"},{"location":"lorawan-module/network-server/#mqtt_4","title":"MQTT","text":"<p>LORIOT outputs its' data to an external MQTT broker, so the below are settings to also subscribe to the same broker.</p> <p>The MQTT integration will have the following fields to copy into SiteSync to create the MQTT connection.</p> SiteSync Field Description Broker URL or IP Address Broker URL or IP Address: your external broker address Port your external broker port, usually 1883 or 8883 (TLS) MQTT Topic user defined"},{"location":"lorawan-module/network-server/#join-server_4","title":"Join Server","text":"<p>The following fields are needed to create an API connection to your network server:</p> SiteSync Field Description URL the URL that you access your instance of Loriot Application ID The ID of the application you wish to sync devices into. API Token Token generated by LORIOT to authenticate API calls"},{"location":"lorawan-module/network-server/#where-to-find-these-fields-in-loriot","title":"Where to find these fields in LORIOT","text":"<p>Application ID</p> <p>This is listed on the main page of your Application</p> <p></p> <p>API Token</p> <p>This can be generated Account/API Keys.</p> <pre><code> |\n</code></pre>"},{"location":"lorawan-module/qr-sync/","title":"QR Sync","text":"<p>QR Sync is a SiteSync feature that provides users with instant provisioning of sensors by scanning a QR code. Embedded into the QR code are all required join keys for a sensor (devEUI, appKey, joinEui) and when scanned are created into Ignition tags.</p> <p>This can be done through a form on the website or through the Perspective mobile app allows users to utilize their mobile device's camera to quickly scan onboard QR codes. </p> <p>Web</p> <p>To add a device on the web version, navigate to Devices and click on \"Add Device\" </p> <p>The following fields are required: -devEUI -appEUI (sometimes called JoinEUI) -appKey -Sensor Type -Name</p> <p></p> <p>When the above are filled out, hit \"Save\" and the device will be created in SiteSync and added to your network.</p> <p>Mobile</p> <p>To onboard a device with the app, connect to the SiteSync perspective project, and navigate to Devices.</p> <p></p> <p>Select \"Activate Device\" and launch the QR scanner.</p> <p>SiteSync currently supports the following formats:</p> <p>-The LoRa Alliance QR code format </p> <p>-QR Codes provided by SiteSync</p> <p>If neither of these formats are detected, the app will return everything it reads to the user to parse further.</p> <p></p> <p>Once the information is filled in, hit submit and the device will be created in SiteSync and added to your network.</p>"},{"location":"lorawan-module/udt/","title":"UDTs","text":"<p>In Ignition, User-Defined Types (UDTs) are custom data types that allow you to group multiple tags into a single,  reusable structure. SiteSync utilizes UDTs to create a structure for decoded sensor data, device metadata, and other attributes to serialize messages into a standard format that can be written to Ignition tags.</p>"},{"location":"lorawan-module/udt/#udt-structure","title":"UDT Structure","text":"<p>SiteSync consumes JSON objects to create UDTs. Each UDT definition must meet the requirements listed below:</p> <ul> <li><code>type</code> should be set to <code>UdtType</code></li> <li><code>name</code> should specify the UDT name</li> <li><code>tags</code> should contain an array of tag objects, where each object defines one tag's properties</li> </ul>"},{"location":"lorawan-module/udt/#example","title":"Example","text":"<pre><code>{\n    \"name\": \"MyUDT\",\n    \"tagType\": \"UdtType\",\n    \"tags\": [\n        {\n            \"dataType\": \"String\",\n            \"name\": \"ExampleTagFolder\",\n            \"tagType\": \"AtomicTag\",\n            \"valueSource\": \"memory\"\n        },\n        {\n            \"name\": \"ExampleTagFolder\",\n            \"tagType\": \"Folder\",\n            \"tags\": [\n                {\n                    \"dataType\": \"String\",\n                    \"name\": \"Temperature\",\n                    \"tagType\": \"AtomicTag\",\n                    \"valueSource\": \"memory\"\n                },\n                {\n                    \"dataType\": \"String\",\n                    \"name\": \"Battery\",\n                    \"tagType\": \"AtomicTag\",\n                    \"valueSource\": \"memory\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"}]}